<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.Sunflower"
        tools:targetApi="31">
        <activity
            android:name=".view.MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity android:name=".view.detail.MovieDetailActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

<!--
    WHY?
    Manifest는 왜 XML로 작성될까?

    Manifest는 애플리케이션의 구성 및 속성을 설정하는 파일이다.
    애플리케이션의 액티비티, 서비스, 퍼미션 등을 설정할 수 있다.
    Manifest는 XML로 설정한다.
    android:allowBackup="true" -> 애플리케이션의 데이터 백업 여부를 설정한다.
    android:icon="@mipmap/ic_launcher" -> 애플리케이션의 아이콘을 지정한다.
    android:label="@string/app_name" -> 애플리케이션의 앱 이름을 지정한다.
    android:roundIcon="@mipmap/ic_launcher_round" 애플리케이션의 둥근 아이콘을 지정한다.
    android:theme="@style/Theme.Sunflower" -> 애플리케이션의 테마를 지정한다.

    <activity> </activity> -> 애플리케이션에서 사용되는 액티비티를 명시한다.
    호출된 액티비티가 명시되지 않을 경우 에러가 발생하고, 앱이 종료된다.
    안드로이드의 컴포넌트가 다른 애플리케이션에서 액세스할 수 있는지 여부를 지정한다.
        -> 따라서 <intent-filter> </intent-filter> 가 포함된 액티비티는 반드시 true로 명시해야한다. 그렇지 않으면 에러.
        -> 반대로, 노출시키고 싶지 않은 경우에 false를 사용한다.
        -> exported의 경우 생략 가능한 속성인데, 액티비티와 서비스는 기본적으로 true이다.
        -> 리시버나, 프로바이더의 경우 기본적으로 차단되어있다.
        -> 액티비티는 기본적으로 접근 가능 상태이기 때문에 명시하지 않아도 다른 액티비티에서 액티비티 간의 이동이 가능한 것이다.

    <intent-filter> </intent-filter> 를 포함하면 애플리케이션이 실행될 때 함께 실행될 액티비티를 지정한다.
        -> android.intent.action.MAIN 시작 액티비티를 알린다.
        -> <intent-filter> 를 생략할 경우 앱이 빌드되지 않는다.
        -> <intent-filter> Manifest의 상단 액티비티가 먼저 호출된다.

    Fragment는 명시하지 않아도 된다.
    WHY? Fragment는 명시하지 않아도 될까?
    애플리케이션의 화면 구성은 액티비티로 된다.
    시작될때 액티비티를 호출하며, 프래그먼트는 애기비티를 구성하는 요소이기 때문에 명시할 필요가 없다.


    안드로이드 4대 컴포넌트
        - 안드로이트를 구성하는데 필요한 4개의 요소를 의미한다.
        - 안드로이드 4대 컴포넌트에는 액티비티, 서비스, 브로드캐스트, 콘텐츠 제공자가 있다.
        - 안드로이드 앱의 필수적인 구성요소로, 각각은 시스템이나 앱에 들어올 수 있는 진입점이다. (?)

        - 각 컴포넌트는 독립적으로 존재한다.
        - 각 컴포넌트는 고유의 기능을 수행한다.
        - 각 컴포넌트는 인텐트를 통해서 상호작용한다.

    인텐트란?
        - 서로 독립적으로 동작하는 4대 컴포넌트 간의 상호 통신을 위한 장치이다.
        - 컴포넌트에 액션이나 데이터를 전달하는데 사용되는 메시지 객체이다.
        - 다른 앱에 컴포넌트를 활성화 시킬 수 있다.

        액티비티(Activity)
            - 사용자와 애플리케이션이 상호작용하는 화면을 의미힌다.
            - 애플리케이션은 최소 1개의 액티비티를 가지고 있어야한다.
            - 컴포넌트들끼리는 인텐트를 통해 상호작용하기 때문에, 인텐트를 통해 다른 액티비티를 호출할 수 있다.
            - 2개 이상의 액티비티를 동시에 Display 할 수 없다.
            - 하나 이상의 View 또는 ViewGroup을 포함하고 있어야한다.
            - 액티비티 내에 프래프먼트를 구성하여 화면을 분할할 수 있다.

        서비스(Service)
            - 서비스는 사용자와 직접 상호작용하지 않는다.
            - 백그라운드에서 어떠한 작업을 처리하기 위해 사용돤다.
            - 타이머 앱의 경우 타이머를 실행하고 앱을 전환해도 타이머가 계속 흘러간다.
            - 애플리케이션을 사용하면서, 활용할 데이터를 다운받는데 사용된다.
            - 서비스는 눈에 보이지 않는다고, 백그라운드 스레드에서 동작한다고 생각하지만, 메인 스레드에서 동작하기 때문에, 별도의 스레드를 생성하여 작업을 처리해줘야한다.
            - 네트워크와 연동이 가능하고 애플리케이션이 종료되어도 이미 시작된 서비스는 계속 동작한다.
            - 여기서 말하는 종료는 무엇인가?
            - 그렇다면 서비스 종료를 제어해야하나?
            - 액티비티와 서비스는 UI 스레드라 불리는 동일한 애플리케이션 스레드에서 동작한다.

        브로드 캐스터(BroadCast Receiver)
            - 브로드캐스터는 안드로이듵 OS로부터 발생하는 각종 이벤트와 핸들링하는 컴포넌트이다.
            - 사용자 인터페이스를 표시하지 않자만, 상태 표시줄 알림을 생성하여 사용자에게 이벤트가 발생했다고 알릴 수 있다.

        콘텐츠 제공자(Content Provider)
            - 콘텐츠 제공자는 파일 시스템, SQLite 데이터베이스, 웹상이나 앱에 액세스할 수 있는 다른 모든 영구저장 위치에 저장 가능 한 입 데이터의 공유형 집합을 말한다.
            - 작은 데이터들은 인텐드를 통해 데이터를 공유할 수 있지만, 콘텐츠 제공자는 음악이나 사진과 같이 용량이 큰 데이터들을 공유할 때 사용한다.

    컴포넌트란?
        - 구성요소를 의미한다.


    프래그먼트란?
        - 프래그먼트는 자체 수명주기를 가지고 있고, 입력 이벤트를 수신한다.
        - 프래그먼트가 포함되어 있는 액티비티가 실행되는 동안 프래그먼트를 추가하거나 삭제할 수 있다.
        - 프래그먼트는 독립적일 수 없다. 액티비티 혹은 부모 프래그먼트에 종속적이다.
        - 프래그먼트는 재사용이 가능하다. 여러 액티비티에서 생성 및 사용할 수 있다.
            - 프래그먼트 생명주기
            - onAttach(): 액티비티나 부모 프래그먼트에 포함될 때 호출된다.
            - onCreate(): 프래그먼트가 생성되며 호출된다. View설정을 할 수 없다.
            - onCreateView(): UI세팅, 레이아웃을 인플레이트한다.
            - onViewCreate(): onCreateView()에서 view를 반환받아 view에 대한 설정을 할 수 있다.
            - onResume(): 사용자와의 상호작용할 할 수 있는 단계이다.
            - onDestroyView(): 프래그먼트가 화면에서 사라진 후 호출된다.
                               프래그먼트의 view 생명주기를 없앤다.
                               이 시점에서 프래그먼트의 참조를 제거하면 가비지 컬렉터가 수거한다.
            - onDestroy(): 프래그먼트가 완전히 제거되는 시점에 호출된다.
            - onDetach(): 액티비티몰 부터 프래그먼트가 제거될 때 호출된다.

    View와 ViewGroup?
        - 쉽게 말하면  < />과 <> </>
        - 모든 View는 화면에 표시되는 요소를 나타내며, 사용자와 상호장용할 수 있다.
        - 모든 View는 View클래스를 상속받는다.
        - ViewGroup은 여러개 또는 하나의 View를 포함하는 컨테이너 역헐이다.
        -
    이벤트와 핸들러
        - 이벤터는 사용자의 동작이다 시스템의 상태변화와 같은 사건을 말한다.
        - 안드로이드에서는 클릭, 키보드 이벤트 등이 있다.
        - 이벤트는 주로 사용자의 상호작용을 감지하고 그에 따른 동작을 수행하는데 사용된다.
        - 핸들러는 안드로이드에서 이벤트를 처리하고, 스레드 간 통신을 관리하느데 사용됩니다.
        - 주로 UI스레드에서 백그라운드 스레드로 작업을 전달하거나, 비동기적인 작업을 처리할때 사용됩니다.

    가비지 컬렉터
        - 프로그램이 더 이상 사용하지 않는 객체를 자동으로 식별하고 제거하는 메모리 관리 기능입니다.

-->